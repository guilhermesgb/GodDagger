class_name GodDaggerComponentsParser extends RefCounted


static var _generated_components: GodDaggerGeneratedComponents


static func _get_components() -> GodDaggerGeneratedComponents:
	var script_name := GodDaggerFileUtils._get_components_file_name()
	var generated_components: GodDaggerGeneratedComponents = load(script_name).new()
	_generated_components = generated_components
	
	return _generated_components


static func _build_dependency_graph_by_parsing_project_files() -> bool:
	if not GodDaggerFileUtils._clear_generated_files():
		return false
	
	var component_classes := GodDaggerComponentResolver._resolve_component_classes()
	var module_classes := GodDaggerModuleResolver._resolve_module_classes()
	
	var components_to_modules_graph := GodDaggerGraph.new()
	var components_to_objects_graphs: Dictionary = {}
	
	var populate_graphs_by_parsing_object_constructor = func (
		component_class_name: String,
		object_class_name: String,
	) -> void:
		
		var object_class := GodDaggerObjectResolver._resolve_object_class(object_class_name)
		var resolved_file_path := object_class.get_resolved_file_path()
		
		# TODO parse constructor declaration straight from the `resolved_file_path`. If no
		#   constructor is found, we now it has no-arguments constructor and the object is unscoped.
	
	var populate_graphs_by_parsing_component_property = func (
		component_class_name: String,
		property: Dictionary,
	) -> void:
		
		var property_name: String = property["name"]
		var property_class: StringName = property["class_name"]
		
		if property_name.begins_with(GodDaggerConstants.DECLARED_INJECTED_PROPERTY_PREFIX):
			var is_property_class_a_module := GodDaggerBaseResolver \
				._resolved_classes_contains_given_class(module_classes, property_class)
			
			if is_property_class_a_module:
				components_to_modules_graph.declare_vertices_link(
					component_class_name, property_class,
				)
				
				# TODO parse objects from this module into `components_to_objects_graphs`!
			else:
				components_to_objects_graphs[component_class_name] \
					.declare_graph_vertex(property_class)
				
				populate_graphs_by_parsing_object_constructor \
					.call(component_class_name, property_class)
	
	for module_class in module_classes:
		var resolved_class_name := module_class.get_resolved_class_name()
		var resolved_file_path := module_class.get_resolved_file_path()
		
		components_to_modules_graph.declare_graph_vertex(resolved_class_name)
	
	for component_class in component_classes:
		var resolved_class_name := component_class.get_resolved_class_name()
		var resolved_file_path := component_class.get_resolved_file_path()
		
		components_to_modules_graph.declare_graph_vertex(resolved_class_name)
		components_to_objects_graphs[resolved_class_name] = GodDaggerGraph.new()
		
		var loaded_script: GodDaggerComponent = load(resolved_file_path).new()
		var properties := loaded_script.get_property_list()
		
		for property in properties:
			populate_graphs_by_parsing_component_property.call(resolved_class_name, property)
	
	
	return GodDaggerFileUtils._generate_script_with_contents(
		"_goddagger_components",
	"""## Auto-generated by GodDagger. Do not edit this file!
class_name __GodDagger__ExampleComponent extends GodDaggerGeneratedComponents


class _GodDaggerProvider__ElectricHeater extends RefCounted:
	
	func _init() -> void:
		pass
	
	func _obtain() -> ElectricHeater:
		return ElectricHeater.new()


class _GodDaggerProvider__Heater extends RefCounted:
	
	var _example_module: ExampleModule
	var _electric_heater_provider: _GodDaggerProvider__ElectricHeater
	
	func _init(
		example_module: ExampleModule,
		electric_heater_provider: _GodDaggerProvider__ElectricHeater,
	) -> void:
		self._example_module = example_module
		self._electric_heater_provider = electric_heater_provider
	
	func _obtain() -> Heater:
		return _example_module.__provide_heater(_electric_heater_provider._obtain())


class _GodDaggerProvider__Thermosiphon extends RefCounted:
	
	var _heater_provider: _GodDaggerProvider__Heater
	
	func _init(
		heater_provider: _GodDaggerProvider__Heater,
	) -> void:
		self._heater_provider = heater_provider
	
	func _obtain() -> Thermosiphon:
		return Thermosiphon.new(_heater_provider._obtain())


class _GodDaggerProvider__Pump extends RefCounted:
	
	var _example_module: ExampleModule
	var _thermosiphon_provider: _GodDaggerProvider__Thermosiphon
	
	func _init(
		example_module: ExampleModule,
		thermosiphon_provider: _GodDaggerProvider__Thermosiphon,
	) -> void:
		self._example_module = example_module
		self._thermosiphon_provider = thermosiphon_provider
	
	func _obtain() -> Pump:
		return _example_module.__provide_pump(_thermosiphon_provider._obtain())


class _GodDaggerProvider__CoffeeMaker extends RefCounted:
	
	var _heater_provider: _GodDaggerProvider__Heater
	var _pump_provider: _GodDaggerProvider__Pump
	
	func _init(
		heater_provider: _GodDaggerProvider__Heater,
		pump_provider: _GodDaggerProvider__Pump,
	) -> void:
		self._heater_provider = heater_provider
		self._pump_provider = pump_provider
	
	func _obtain() -> CoffeeMaker:
		return CoffeeMaker.new(_heater_provider._obtain(), _pump_provider._obtain())


var _electric_heater_provider: _GodDaggerProvider__ElectricHeater
var _heater_provider: _GodDaggerProvider__Heater
var _thermosiphon_provider: _GodDaggerProvider__Thermosiphon
var _pump_provider: _GodDaggerProvider__Pump
var _coffee_maker_provider: _GodDaggerProvider__CoffeeMaker


func _init() -> void:
	var example_module := ExampleModule.new()
	_electric_heater_provider = _GodDaggerProvider__ElectricHeater.new()
	_heater_provider = _GodDaggerProvider__Heater.new(example_module, _electric_heater_provider)
	_thermosiphon_provider = _GodDaggerProvider__Thermosiphon.new(_heater_provider)
	_pump_provider = _GodDaggerProvider__Pump.new(example_module, _thermosiphon_provider)
	_coffee_maker_provider = _GodDaggerProvider__CoffeeMaker.new(_heater_provider, _pump_provider)


func get_coffee_maker() -> CoffeeMaker:
	return _coffee_maker_provider._obtain()
""",
	)
