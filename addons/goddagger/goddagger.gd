class_name GodDagger extends RefCounted


static var _generated_components: Dictionary = {}


static func inject(target: Object) -> void:
	var component: GodDaggerComponent = _get_component()
	target["__coffee_maker"] = component.get_coffee_maker()


static func _get_component() -> GodDaggerComponent:
	var component_name := GodDaggerComponentResolver._resolve_component_name()
	
	if not component_name in _generated_components.keys():
		var script_name := GodDaggerFileUtils._get_component_file_name(component_name)
		var component: GodDaggerComponent = load(script_name).new()
		_generated_components[component_name] = component
	
	return _generated_components[component_name]


static func _build_dependency_graph_by_parsing_project_files() -> bool:
	if not GodDaggerFileUtils._clear_generated_files():
		return false
	
	if not GodDaggerFileUtils._generate_script_with_contents(
		"_goddagger__example_component",
	"""## Auto-generated by GodDagger. Do not edit this file!
class_name __GodDagger__ExampleComponent extends GodDaggerComponent


class _GodDaggerProvider__ElectricHeater extends RefCounted:
	
	func _init() -> void:
		pass
	
	func _obtain() -> ElectricHeater:
		return ElectricHeater.new()


class _GodDaggerProvider__Heater extends RefCounted:
	
	var _example_module: ExampleModule
	var _electric_heater_provider: _GodDaggerProvider__ElectricHeater
	
	func _init(
		example_module: ExampleModule,
		electric_heater_provider: _GodDaggerProvider__ElectricHeater,
	) -> void:
		self._example_module = example_module
		self._electric_heater_provider = electric_heater_provider
	
	func _obtain() -> Heater:
		return _example_module.__provide_heater(_electric_heater_provider._obtain())


class _GodDaggerProvider__Thermosiphon extends RefCounted:
	
	var _heater_provider: _GodDaggerProvider__Heater
	
	func _init(
		heater_provider: _GodDaggerProvider__Heater,
	) -> void:
		self._heater_provider = heater_provider
	
	func _obtain() -> Thermosiphon:
		return Thermosiphon.new(_heater_provider._obtain())


class _GodDaggerProvider__Pump extends RefCounted:
	
	var _example_module: ExampleModule
	var _thermosiphon_provider: _GodDaggerProvider__Thermosiphon
	
	func _init(
		example_module: ExampleModule,
		thermosiphon_provider: _GodDaggerProvider__Thermosiphon,
	) -> void:
		self._example_module = example_module
		self._thermosiphon_provider = thermosiphon_provider
	
	func _obtain() -> Pump:
		return _example_module.__provide_pump(_thermosiphon_provider._obtain())


class _GodDaggerProvider__CoffeeMaker extends RefCounted:
	
	var _heater_provider: _GodDaggerProvider__Heater
	var _pump_provider: _GodDaggerProvider__Pump
	
	func _init(
		heater_provider: _GodDaggerProvider__Heater,
		pump_provider: _GodDaggerProvider__Pump,
	) -> void:
		self._heater_provider = heater_provider
		self._pump_provider = pump_provider
	
	func _obtain() -> CoffeeMaker:
		return CoffeeMaker.new(_heater_provider._obtain(), _pump_provider._obtain())


var _electric_heater_provider: _GodDaggerProvider__ElectricHeater
var _heater_provider: _GodDaggerProvider__Heater
var _thermosiphon_provider: _GodDaggerProvider__Thermosiphon
var _pump_provider: _GodDaggerProvider__Pump
var _coffee_maker_provider: _GodDaggerProvider__CoffeeMaker


func _init() -> void:
	var example_module := ExampleModule.new()
	_electric_heater_provider = _GodDaggerProvider__ElectricHeater.new()
	_heater_provider = _GodDaggerProvider__Heater.new(example_module, _electric_heater_provider)
	_thermosiphon_provider = _GodDaggerProvider__Thermosiphon.new(_heater_provider)
	_pump_provider = _GodDaggerProvider__Pump.new(example_module, _thermosiphon_provider)
	_coffee_maker_provider = _GodDaggerProvider__CoffeeMaker.new(_heater_provider, _pump_provider)


func get_coffee_maker() -> CoffeeMaker:
	return _coffee_maker_provider._obtain()
""",
	):
		return false
	
	return true
